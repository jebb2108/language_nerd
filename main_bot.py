"""
–¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–´: –ì–õ–ê–í–ù–´–ô –ë–û–¢ –ò –ë–û–¢-–°–õ–û–í–ê–†–¨

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤—É—Ö Telegram-–±–æ—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:
1. –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (Main Bot) - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. –ë–æ—Ç-—Å–ª–æ–≤–∞—Ä—å (Dictionary Bot) - –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º

–û–±–∞ –±–æ—Ç–∞ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
"""

import asyncio  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
import logging  # –î–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
import sys  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
from pyexpat.errors import messages
from webbrowser import Error

import asyncpg
from aiohttp import web
from asyncpg.pool import Pool
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from typing import List, Tuple, Optional, Union  # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, Dispatcher, Router, F  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from aiogram.client.default import DefaultBotProperties  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
from aiogram.enums import ParseMode  # –†–µ–∂–∏–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (HTML, Markdown)
from aiogram.filters import Command, CommandStart  # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.state import State, StatesGroup  # –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.storage.memory import MemoryStorage  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
from aiogram.types import (  # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö Telegram
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton, ReplyKeyboardRemove, WebAppInfo
)

# –ò–º–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (config.py)
from config import *

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –í–´–ó–í–ê–ù–ê
load_dotenv(""".env""")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
db_pool: Optional[Pool] = None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (—Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
POSTGRES_HOST = os.getenv("POSTGRES_HOST", "localhost")
POSTGRES_USER = os.getenv("POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "password")
POSTGRES_DB = os.getenv("POSTGRES_DB", "telegram_bot")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
POSTGRES_PORT = int(os.getenv("POSTGRES_PORT", "5432"))


""" 
=============== –ë–û–¢ 1: –û–°–ù–û–í–ù–û–ô –ë–û–¢ (–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ) =============== 
–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
"""

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN_MAIN = os.getenv("BOT_TOKEN_MAIN")

# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
storage = MemoryStorage()

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞
router_main = Router()

class PollingStates(StatesGroup):
    camefrom_state = State()
    language_state = State()
    introduction_state = State()


@router_main.message(Command("start"))
async def start_with_polling(message: Message, state: FSMContext):

    user_id = message.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        async with db_pool.acquire() as conn:
            user_exists = await conn.fetchval(
                "SELECT 1 FROM users WHERE user_id = $1",
                user_id
            )

        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
        await state.update_data(
            user_id=user_id,
            username=message.from_user.username or "",
            first_name=message.from_user.first_name or "",
            lang_code=message.from_user.language_code or "en",
            chosen_language="",
            camefrom="",
            about="",
        )

    except Exception as e:
        logging.error(f"Error in start handler: {e}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_exists:
        await show_main_menu(message, state)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    lang_code = data['lang_code']
    if lang_code not in ['en', 'ru']:
        lang_code = 'en'

    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ callback-–¥–∞–Ω–Ω—ã–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                    text=QUESTIONARY["where_youcamefrom"][f"{lang_code}0"],
                    callback_data="camefrom_friends"
            )
        ],
        [
            InlineKeyboardButton(
                text=QUESTIONARY["where_youcamefrom"][f"{lang_code}1"],
                callback_data="camefrom_search"
            )
        ],
        [
            InlineKeyboardButton(
                text=QUESTIONARY["where_youcamefrom"][f"{lang_code}2"],
                callback_data="camefrom_other"
            )
        ]
    ])
        # –û—Ç–ø—Ä–∞–≤–ª—è—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_message_with_save(message, QUESTIONARY["intro"][lang_code], state, True, keyboard )
    await state.set_state(PollingStates.camefrom_state)


@router_main.callback_query(F.data.startswith("camefrom_"), PollingStates.camefrom_state)
async def handle_camefrom(callback: CallbackQuery, state: FSMContext):
    try:
        camefrom = callback.data.split("_")[1]
        await state.update_data(camefrom=camefrom)

        data = await state.get_data()
        lang_code = data.get('lang_code', 'en')

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ callback-–¥–∞–Ω–Ω—ã–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_russian"),
            ],
            [
                InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_english")
            ],
            [
                InlineKeyboardButton(text="üá©üá™ Deutsch", callback_data="lang_german"),
            ],
            [
                InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data="lang_spanish")
            ],
            [
                InlineKeyboardButton(text="üá®üá≥ ‰∏≠Êñá", callback_data="lang_chineese")
            ]
        ])

        await send_message_with_save(callback, QUESTIONARY["lang_pick"][lang_code], state, True, keyboard)
        await state.set_state(PollingStates.language_state)
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in camefrom handler: {e}")


@router_main.callback_query(F.data.startswith("lang_"), PollingStates.language_state)
async def handle_language_choice(callback: CallbackQuery, state: FSMContext):
    try:

        data = await state.get_data()
        lang_code = data.get('lang_code', 'en')

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=QUESTIONARY["confirm"][lang_code],
                callback_data="action_confirm"
            )]
        ])

        users_choice = callback.data.split("_")[1]

        await callback.message.edit_text(
            text=f"‚û™ –í—ã –≤—ã–±—Ä–∞–ª–∏: {users_choice}\n\n{QUESTIONARY['gratitude'][lang_code]}",
            reply_markup=keyboard
        )
        await state.set_state(PollingStates.introduction_state)
        await callback.answer()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_id = data['user_id']
        username = data.get('username', 'None')
        first_name = data.get('first_name', 'None')
        camefrom = data.get('camefrom', 'None')
        await create_users_table(user_id, username, first_name, camefrom, users_choice, lang_code)

    except Exception as e:
        logging.error(f"Error in language choice: {e}")




@router_main.callback_query(F.data == "action_confirm", PollingStates.introduction_state)
async def start_main_menu(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(callback.bot, callback.message.chat.id, state)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    await state.clear()

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞–º—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username, first_name, language, lang_code = await get_user_info(user_id)
    await state.update_data(
        user_id = user_id,
        username = username,
        first_name = first_name,
        language = language,
        lang_code = lang_code,
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(callback.message, state)


async def show_main_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    user_id = data["user_id"]
    first_name = data["first_name"]
    lang_code = data["lang_code"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å user_id
    web_app_url = f"https://jebb2108.github.io/index.html?user_id={user_id}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Web App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=BUTTONS["dictionary"][lang_code], web_app=WebAppInfo(url=web_app_url)),
        ],
        [
            InlineKeyboardButton(text=BUTTONS["find_partner"][lang_code], url="https://t.me/lllang_dictbot"),
        ],
        [
            InlineKeyboardButton(text=BUTTONS["about_bot"][lang_code], callback_data="about"),
            InlineKeyboardButton(text=BUTTONS["support"][lang_code], url="https://t.me/user_bot6426"),
        ],
    ])

    await message.answer(
        f"{BUTTONS["hello"][lang_code]}<b>{first_name}</b>!\n\n{QUESTIONARY["welcome"][lang_code]}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


@router_main.callback_query(F.data == "about")
async def about(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û –±–æ—Ç–µ"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    """

    data = await state.get_data()
    lang_code = data["lang_code"]
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô Go Back", callback_data="go_back")]
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ —Ç–µ–∫—Å—Ç "–û –±–æ—Ç–µ"
    await callback.message.edit_text(QUESTIONARY["about"][lang_code], reply_markup=keyboard)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ)
    await callback.answer()


@router_main.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    first_name = data["first_name"]
    lang_code = data["lang_code"]
    # URL –≤–∞—à–µ–≥–æ Web App
    web_app_url = "https://jebb2108.github.io/index.html"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Web App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=BUTTONS["dictionary"][lang_code], web_app=WebAppInfo(url=web_app_url)),
        ],
        [
            InlineKeyboardButton(text=BUTTONS["find_partner"][lang_code], url="https://t.me/lllang_dictbot"),
        ],
        [
            InlineKeyboardButton(text=BUTTONS["about_bot"][lang_code], callback_data="about"),
            InlineKeyboardButton(text=BUTTONS["support"][lang_code], url="https://t.me/user_bot6426"),
        ],
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(f"{BUTTONS["hello"][lang_code]}<b>{first_name}</b>!\n\n{QUESTIONARY["welcome"][lang_code]}", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()


async def send_message_with_save(message: Union[Message, CallbackQuery], text: str, state: FSMContext, markup=False, keyboard=None):
    if isinstance(message, CallbackQuery):
        message = message.message
    if markup:
        sent_message = await message.answer(
            text=text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )
    else:
        sent_message = await message.answer(text)

    data = await state.get_data()
    curr_messages = data.get("messages_to_delete", [])
    curr_messages.append(sent_message.message_id)

    await state.update_data(messages_to_delete=curr_messages)
    return sent_message


async def delete_previous_messages(bot: Bot, chat_id: int, state: FSMContext):
    data = await state.get_data()
    if "messages_to_delete" in data:
        for msg_id in data["messages_to_delete"]:
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        await state.update_data(messages_to_delete=[])


@router_main.message()
async def handle_other_messages(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
    –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start
    """
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é")


"""
=============== –ó–ê–ü–£–°–ö WEB API ===============
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WEB –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–µ–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
"""


# –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Web App
async def web_app_handler(request):
    return web.FileResponse("webapp/dist/index.html")


# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def api_words_handler(request):
    user_id = int(request.query.get('user_id'))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    words = await get_words_from_db(user_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    words_json = []
    for word_tuple in words:
        # word_tuple: (word, part_of_speech, translation)
        words_json.append({
            'word': word_tuple[0],
            'part_of_speech': word_tuple[1],
            'translation': word_tuple[2]
        })

    logging.info(f"Sent {len(words_json)} words for user {user_id}")
    return web.json_response(words_json)


# = –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• =
# –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite –≤ –ø–∞–ø–∫–µ dbs

async def init_db():
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(
            host=POSTGRES_HOST,
            port=POSTGRES_PORT,
            user=POSTGRES_USER,
            password=POSTGRES_PASSWORD,
            database=POSTGRES_DB,
            min_size=5,
            max_size=20
        )
        async with db_pool.acquire() as conn:
            await conn.execute("""
            CREATE TABLE IF NOT EXISTS words (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            word TEXT NOT NULL,
            part_of_speech TEXT NOT NULL,
            translation TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT NOW(),
            UNIQUE (user_id, word)
            ); 
        """)
            await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username TEXT NOT NULL,
            first_name TEXT NOT NULL,
            camefrom TEXT NOT NULL,
            language TEXT NOT NULL,
            lang_code TEXT NOT NULL,
            about TEXT NULL,
            UNIQUE (user_id)
            ); """)

        logging.info("Database initialized successfully")
    except Exception as e:
        logging.critical(f"Database initialization failed: {e}")
        raise


async def close_db():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global db_pool
    if db_pool:
        await db_pool.close()

async def create_users_table(user_id, username, first_name, camefrom, language, lang_code):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as conn:
            result = await conn.execute("""
                INSERT INTO users (user_id, username, first_name, camefrom, language, lang_code) 
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (user_id) DO UPDATE 
                SET username = EXCLUDED.username,
                    camefrom = EXCLUDED.camefrom,
                    first_name = EXCLUDED.first_name,
                    language = EXCLUDED.language,
                    lang_code = EXCLUDED.lang_code
            """, user_id, username, first_name, camefrom, language, lang_code)
            logging.info(f"User {user_id} created/updated: {result}")
            return True
    except Exception as e:
        logging.error(f"Error creating/updating user {user_id}: {e}")
        return False


async def get_user_info(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT username, first_name, language, lang_code FROM users WHERE user_id = $1",
            user_id
        )
        if row:
            return row["username"], row["first_name"], row["language"], row["lang_code"]
        return None, None, None, None


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def get_words_from_db(user_id: int) -> List[Tuple[str, str, str]]:
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT word, part_of_speech, translation FROM words WHERE user_id = $1 ORDER BY word",
            user_id
        )
        return [(row['word'], row['part_of_speech'], row['translation']) for row in rows]

async def delete_word_from_db(user_id: int, word: str) -> bool:
    async with db_pool.acquire() as conn:
        result = await conn.execute(
            "DELETE FROM words WHERE user_id = $1 AND word = $2",
            user_id, word
        )
        return "DELETE" in result

async def update_word_in_db(user_id: int, old_word: str, new_word: str, pos: str, value: str) -> bool:
    async with db_pool.acquire() as conn:
        # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if old_word != new_word:
            await conn.execute(
                "DELETE FROM words WHERE user_id = $1 AND word = $2",
                user_id, old_word
            )
            await conn.execute(
                "INSERT INTO words (user_id, word, part_of_speech, translation) VALUES ($1, $2, $3, $4)",
                user_id, new_word, pos, value
            )
            return True
        else:
            result = await conn.execute(
                """UPDATE words 
                SET part_of_speech = $1, translation = $2 
                WHERE user_id = $3 AND word = $4""",
                pos, value, user_id, new_word
            )
            return "UPDATE" in result

async def add_word_to_db(user_id: int, word: str, pos: str, value: str) -> bool:
    if value is None:
        value = ""
    async with db_pool.acquire() as conn:
        try:
            await conn.execute(
                "INSERT INTO words (user_id, word, part_of_speech, translation) VALUES ($1, $2, $3, $4)",
                user_id, word, pos, value
            )
            return True
        except Exception as e:
            logging.error(f"Database error: {e}")
            return False

async def check_word_exists(user_id: int, word: str) -> bool:
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT 1 FROM words WHERE user_id = $1 AND word = $2 LIMIT 1",
            user_id, word
        )
        return row is not None


"""
=============== –ó–ê–ü–£–°–ö WEB API ===============
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WEB –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–µ–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
"""


# –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Web App
async def web_app_handler(request):
    return web.FileResponse("webapp/dist/index.html")


# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def api_words_handler(request):
    user_id = int(request.query.get('user_id'))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    words = await get_words_from_db(user_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    words_json = []
    for word_tuple in words:
        # word_tuple: (word, part_of_speech, translation)
        words_json.append({
            'word': word_tuple[0],
            'part_of_speech': word_tuple[1],
            'translation': word_tuple[2]
        })

    logging.info(f"Sent {len(words_json)} words for user {user_id}")
    return web.json_response(words_json)



"""
===== –ó–ê–ü–£–°–ö –í–°–ï–ô –°–ò–°–¢–ï–ú–´ =====
"""


async def run_bot(bot_token: str, router: Router, storage=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - bot_token: —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
    - router: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    - storage: —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(storage=storage) if storage else Dispatcher()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    dp.include_router(router)

    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram
    await dp.start_polling(bot)



async def run():

    logging.basicConfig(
        level=logging.INFO,
        stream=sys.stdout,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
    )

    await init_db()
    bot = Bot(token=BOT_TOKEN_MAIN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=storage)
    dp.include_router(router_main)

    logging.info("Starting main bot (polling)‚Ä¶")
    await dp.start_polling(bot)
    await close_db()

if __name__ == "__main__":
    asyncio.run(run())