"""
–¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–´: –ì–õ–ê–í–ù–´–ô –ë–û–¢ –ò –ë–û–¢-–ü–ê–†–¢–ù–ï–†

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤—É—Ö Telegram-–±–æ—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:
1. –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (Main Bot) - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. –ë–æ—Ç-–ø–∞—Ä—Ç–Ω–µ—Ä (Partner Bot) - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

–û–±–∞ –±–æ—Ç–∞ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥—Ä—É–≥ –¥—Ä—É–≥—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import logging
import sys
import asyncio
import os
from typing import Union

from aiohttp import web
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ë–î –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
from db_cmds import (
    db_pool,
    init_db,
    close_db,
    create_users_table,
    get_user_info,
    get_words_from_db,
    lock_manager,
)


# –ò–º–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
from config import QUESTIONARY, BUTTONS

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –í–´–ó–í–ê–ù–ê
load_dotenv(""".env""")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–º–∫–∞
LOCK_NAME = "telegram_bot_lock"
LOCK_TIMEOUT = 10  # –°–µ–∫—É–Ω–¥

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (—Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
POSTGRES_HOST = os.getenv("POSTGRES_HOST", "localhost")
POSTGRES_USER = os.getenv("POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "password")
POSTGRES_DB = os.getenv("POSTGRES_DB", "telegram_bot")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
POSTGRES_PORT = int(os.getenv("POSTGRES_PORT", "5432"))


""" 
=============== –ë–û–¢ 1: –û–°–ù–û–í–ù–û–ô –ë–û–¢ (–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ) =============== 
–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
"""

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN_MAIN = os.getenv("BOT_TOKEN_MAIN")

# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
storage = MemoryStorage()

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞
router_main = Router()

class PollingStates(StatesGroup):
    camefrom_state = State()
    language_state = State()
    introduction_state = State()


@router_main.message(Command("start"))
async def start_with_polling(message: Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if not lock_manager.has_lock:
        logging.warning("Skipping message processing - no lock")
        return

    user_id = message.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        async with db_pool.acquire() as conn:
            user_exists = await conn.fetchval(
                "SELECT 1 FROM users WHERE user_id = $1",
                user_id
            )

        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
        await state.update_data(
            user_id=user_id,
            username=message.from_user.username or "",
            first_name=message.from_user.first_name or "",
            lang_code=message.from_user.language_code or "en",
            chosen_language="",
            camefrom="",
            about="",
        )

    except Exception as e:
        logging.error(f"Error in start handler: {e}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_exists:
        await show_main_menu(message, state)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    lang_code = data['lang_code']
    if lang_code not in ['en', 'ru']:
        lang_code = 'en'

    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ callback-–¥–∞–Ω–Ω—ã–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                    text=QUESTIONARY["where_youcamefrom"][f"{lang_code}0"],
                    callback_data="camefrom_friends"
            )
        ],
        [
            InlineKeyboardButton(
                text=QUESTIONARY["where_youcamefrom"][f"{lang_code}1"],
                callback_data="camefrom_search"
            )
        ],
        [
            InlineKeyboardButton(
                text=QUESTIONARY["where_youcamefrom"][f"{lang_code}2"],
                callback_data="camefrom_other"
            )
        ]
    ])
        # –û—Ç–ø—Ä–∞–≤–ª—è—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_message_with_save(message, QUESTIONARY["intro"][lang_code], state, True, keyboard )
    await state.set_state(PollingStates.camefrom_state)


@router_main.callback_query(F.data.startswith("camefrom_"), PollingStates.camefrom_state)
async def handle_camefrom(callback: CallbackQuery, state: FSMContext):

    if not lock_manager.has_lock:
        await callback.answer("‚è≥ Please try again later...")
        return

    try:
        camefrom = callback.data.split("_")[1]
        await state.update_data(camefrom=camefrom)

        data = await state.get_data()
        lang_code = data.get('lang_code', 'en')

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ callback-–¥–∞–Ω–Ω—ã–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_russian"),
            ],
            [
                InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_english")
            ],
            [
                InlineKeyboardButton(text="üá©üá™ Deutsch", callback_data="lang_german"),
            ],
            [
                InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data="lang_spanish")
            ],
            [
                InlineKeyboardButton(text="üá®üá≥ ‰∏≠Êñá", callback_data="lang_chineese")
            ]
        ])

        await send_message_with_save(callback, QUESTIONARY["lang_pick"][lang_code], state, True, keyboard)
        await state.set_state(PollingStates.language_state)
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in camefrom handler: {e}")


@router_main.callback_query(F.data.startswith("lang_"), PollingStates.language_state)
async def handle_language_choice(callback: CallbackQuery, state: FSMContext):
    try:

        data = await state.get_data()
        lang_code = data.get('lang_code', 'en')

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=QUESTIONARY["confirm"][lang_code],
                callback_data="action_confirm"
            )]
        ])

        users_choice = callback.data.split("_")[1]

        await callback.message.edit_text(
            text=f"‚û™ –í—ã –≤—ã–±—Ä–∞–ª–∏: {users_choice}\n\n{QUESTIONARY['gratitude'][lang_code]}",
            reply_markup=keyboard
        )
        await state.set_state(PollingStates.introduction_state)
        await callback.answer()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_id = data['user_id']
        username = data.get('username', 'None')
        first_name = data.get('first_name', 'None')
        camefrom = data.get('camefrom', 'None')
        await create_users_table(user_id, username, first_name, camefrom, users_choice, lang_code)

    except Exception as e:
        logging.error(f"Error in language choice: {e}")




@router_main.callback_query(F.data == "action_confirm", PollingStates.introduction_state)
async def start_main_menu(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(callback.bot, callback.message.chat.id, state)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    await state.clear()

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞–º—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username, first_name, language, lang_code = await get_user_info(user_id)
    await state.update_data(
        user_id = user_id,
        username = username,
        first_name = first_name,
        language = language,
        lang_code = lang_code,
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(callback.message, state)


async def show_main_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    user_id = data["user_id"]
    first_name = data["first_name"]
    lang_code = data["lang_code"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å user_id
    web_app_url = f"https://jebb2108.github.io/index.html?user_id={user_id}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Web App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=BUTTONS["dictionary"][lang_code], web_app=WebAppInfo(url=web_app_url)),
        ],
        [
            InlineKeyboardButton(text=BUTTONS["find_partner"][lang_code], url="https://t.me/lllang_onlinebot"),
        ],
        [
            InlineKeyboardButton(text=BUTTONS["about_bot"][lang_code], callback_data="about"),
            InlineKeyboardButton(text=BUTTONS["support"][lang_code], url="https://t.me/user_bot6426"),
        ],
    ])

    await message.answer(
        f"{BUTTONS["hello"][lang_code]}<b>{first_name}</b>!\n\n{QUESTIONARY["welcome"][lang_code]}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


@router_main.callback_query(F.data == "about")
async def about(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û –±–æ—Ç–µ"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    """

    data = await state.get_data()
    lang_code = data["lang_code"]
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô Go Back", callback_data="go_back")]
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ —Ç–µ–∫—Å—Ç "–û –±–æ—Ç–µ"
    await callback.message.edit_text(QUESTIONARY["about"][lang_code], reply_markup=keyboard)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ)
    await callback.answer()


@router_main.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    first_name = data["first_name"]
    lang_code = data["lang_code"]
    # URL –≤–∞—à–µ–≥–æ Web App
    web_app_url = "https://jebb2108.github.io/index.html"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Web App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=BUTTONS["dictionary"][lang_code], web_app=WebAppInfo(url=web_app_url)),
        ],
        [
            InlineKeyboardButton(text=BUTTONS["find_partner"][lang_code], url="https://t.me/lllang_onlinebot"),
        ],
        [
            InlineKeyboardButton(text=BUTTONS["about_bot"][lang_code], callback_data="about"),
            InlineKeyboardButton(text=BUTTONS["support"][lang_code], url="https://t.me/user_bot6426"),
        ],
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(f"{BUTTONS["hello"][lang_code]}<b>{first_name}</b>!\n\n{QUESTIONARY["welcome"][lang_code]}", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()


async def send_message_with_save(message: Union[Message, CallbackQuery], text: str, state: FSMContext, markup=False, keyboard=None):
    if isinstance(message, CallbackQuery):
        message = message.message
    if markup:
        sent_message = await message.answer(
            text=text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )
    else:
        sent_message = await message.answer(text)

    data = await state.get_data()
    curr_messages = data.get("messages_to_delete", [])
    curr_messages.append(sent_message.message_id)

    await state.update_data(messages_to_delete=curr_messages)
    return sent_message


async def delete_previous_messages(bot: Bot, chat_id: int, state: FSMContext):
    data = await state.get_data()
    if "messages_to_delete" in data:
        for msg_id in data["messages_to_delete"]:
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        await state.update_data(messages_to_delete=[])


@router_main.message()
async def handle_other_messages(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
    –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start
    """
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é")


"""
=============== –ó–ê–ü–£–°–ö WEB API ===============
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WEB –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–µ–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
"""


# –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Web App
async def web_app_handler(request):
    return web.FileResponse("webapp/dist/index.html")


# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def api_words_handler(request):
    user_id = int(request.query.get('user_id'))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    words = await get_words_from_db(user_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    words_json = []
    for word_tuple in words:
        # word_tuple: (word, part_of_speech, translation)
        words_json.append({
            'word': word_tuple[0],
            'part_of_speech': word_tuple[1],
            'translation': word_tuple[2]
        })

    logging.info(f"Sent {len(words_json)} words for user {user_id}")
    return web.json_response(words_json)

"""
=============== –ó–ê–ü–£–°–ö WEB API ===============
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WEB –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–µ–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
"""


# –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Web App
async def web_app_handler(request):
    return web.FileResponse("webapp/dist/index.html")


# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def api_words_handler(request):
    user_id = int(request.query.get('user_id'))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    words = await get_words_from_db(user_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    words_json = []
    for word_tuple in words:
        # word_tuple: (word, part_of_speech, translation)
        words_json.append({
            'word': word_tuple[0],
            'part_of_speech': word_tuple[1],
            'translation': word_tuple[2]
        })

    logging.info(f"Sent {len(words_json)} words for user {user_id}")
    return web.json_response(words_json)



"""
===== –ó–ê–ü–£–°–ö –í–°–ï–ô –°–ò–°–¢–ï–ú–´ =====
"""


async def run_bot(bot_token: str, router: Router, storage=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - bot_token: —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
    - router: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    - storage: —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(storage=storage) if storage else Dispatcher()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    dp.include_router(router)
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram
    await dp.start_polling(bot)


async def run():
    logging.basicConfig(
        level=logging.INFO,
        stream=sys.stdout,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    await init_db()

    # –ó–∞–ø—É—Å–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    asyncio.create_task(lock_manager.maintain())

    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await asyncio.sleep(1)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN_MAIN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=storage)
    dp.include_router(router_main)

    logging.info("Starting main bot (polling)‚Ä¶")
    await dp.start_polling(bot)
    await close_db()

if __name__ == "__main__":
    asyncio.run(run())