import json
import asyncio
from aiogram import Router, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from config import BOT_TOKEN_MAIN, logger # noqa

router = Router(name=__name__)


async def send_telegram_message(
        session,
        chat_id: int,
        text: str,
        reply_markup: InlineKeyboardMarkup = None,
        parse_mode: str = "Markdown"
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN_MAIN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
        "disable_web_page_preview": True
    }

    if reply_markup:
        payload["reply_markup"] = reply_markup.to_json()

    try:
        async with session.post(url, json=payload, timeout=30) as response:
            if response.status != 200:
                response_text = await response.text()
                logger.error(f"Telegram API error: {response.status} - {response_text}")
            return response.status == 200
    except Exception as e:
        logger.error(f"Telegram send error: {e}")
        return False


async def send_user_report(db_pool, session, user_id, report_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –æ—Ç—á–µ—Ç–∞
        async with db_pool.acquire() as conn:
            words = await conn.fetch(
                "SELECT word_id, word, sentence, options, correct_index "
                "FROM report_words WHERE report_id = $1",
                report_id
            )

        if not words:
            logger.warning(f"No words found for report {report_id}")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        intro_message = (
            "üìö *–í–∞—à–∏ —Å–ª–æ–≤–∞ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
            "–ë—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É."
        )
        await send_telegram_message(session, user_id, intro_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for i, record in enumerate(words, 1):
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            keyboard = []
            for idx, option in enumerate(record["options"]):
                # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data
                callback_data = json.dumps({
                    "type": "word_quiz",
                    "word_id": record["word_id"],
                    "selected": idx,
                    "correct": record["correct_index"],
                    "total": len(words),
                    "current": i,
                })
                keyboard.append([InlineKeyboardButton(
                    text=option,
                    callback_data=callback_data
                )])

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"*–í–æ–ø—Ä–æ—Å {i}/{len(words)}:*\n{record['sentence']}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_telegram_message(
                session,
                user_id,
                message,
                reply_markup=reply_markup
            )

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.5)

        return True

    except Exception as e:
        logger.error(f"Error sending interactive report to {user_id}: {e}")
        return False


@router.callback_query(lambda c: json.loads(c.data)["type"] == "word_quiz")
async def handle_word_quiz(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–æ —Å–ª–æ–≤–∞–º–∏"""
    try:
        data = json.loads(callback.data)
        word_id = data["word_id"]
        selected = data["selected"]
        correct_idx = data["correct"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if selected == correct_idx:
            message = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        else:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ë–î
            async with db_pool.acquire() as conn:
                record = await conn.fetchrow(
                    "SELECT options, correct_index FROM report_words WHERE word_id = $1",
                    word_id
                )
            correct_word = record["options"][record["correct_index"]]
            message = f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_word}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.answer()
        await callback.message.reply(
            message,
            reply_to_message_id=callback.message.message_id
        )

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

    except Exception as e:
        logger.error(f"Error handling quiz callback: {e}")