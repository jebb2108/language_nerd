import logging
from typing import Union

from aiogram import Router, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import Text, Bold
from aiogram.utils.markdown import html_decoration as hd
from aiogram.enums import ParseMode

from middlewares.resources_middleware import ResourcesMiddleware # noqa
from utils.message_mgr import MessageManager # noqa
from config import LOG_CONFIG # noqa

logging.basicConfig(**LOG_CONFIG)
logger = logging.getLogger(name='weekly_message_commands')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router(name=__name__)


async def send_user_report(
        bot: Bot,
        user_id: int,
        report_id: int,
        database: ResourcesMiddleware,
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
    """
    try:
        async with database.acquire_connection() as conn:
            report = await conn.fetchrow(
                "SELECT * FROM weekly_reports WHERE report_id = $1",
                report_id
            )
            words = await conn.fetch(
                "SELECT * FROM report_words WHERE report_id = $1",
                report_id
            )

        if not report or not words:
            logger.warning(f"No report data found for report_id: {report_id}")
            return False

        message_text = (
            f"üìä –í–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º:\n\n"
            f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π",
                callback_data=f"start_report:{report_id}"
            )]
        ])

        await bot.send_message(
            chat_id=user_id,
            text=message_text,
            reply_markup=keyboard
        )
        return True

    except Exception as e:
        logger.error(f"Error sending interactive report to {user_id}: {e}")
        return False


@router.callback_query(lambda c: c.data.startswith("start_report:"))
async def start_report_handler(
        callback: types.CallbackQuery,
        state: FSMContext,
        database: ResourcesMiddleware,
):
    try:
        report_id = int(callback.data.split(":", 1)[1])
        async with database.acquire_connection() as conn:
            words = await conn.fetch(
                "SELECT word_id FROM report_words WHERE report_id = $1",
                report_id
            )

        if not words:
            await callback.answer("–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        quiz_manager = MessageManager(bot=callback.bot, state=state)
        chat_id = callback.message.chat.id

        await state.update_data(
            report_id=report_id,
            word_ids=[row["word_id"] for row in words],
            current_index=0,
            chat_id=chat_id,
            db_pool=database,
            quiz_manager=quiz_manager  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤ state
        )

        await quiz_manager.send_message_with_save(
            chat_id=chat_id,
            text="–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π..."
        )

        # –ü–µ—Ä–µ–¥–∞–µ–º quiz_manager –≤ send_question
        await send_question(state, quiz_manager)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_report_handler: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)


async def send_question(
        state: FSMContext,
        quiz_manager: MessageManager
):
    data = await state.get_data()
    idx = data.get("current_index")
    word_ids = data.get("word_ids")
    chat_id = data.get("chat_id")
    db_pool = data.get("db_pool")

    if not all(key in data for key in ["current_index", "word_ids", "chat_id", "db_pool"]):
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM!")
        return

    if idx >= len(word_ids):
        await quiz_manager.delete_previous_messages(chat_id)
        await quiz_manager.bot.send_message_with_save(  # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            chat_id=chat_id,
            text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é."
        )
        await state.clear()
        return

    word_id = word_ids[idx]
    async with db_pool.acquire_connection() as conn:
        word_data = await conn.fetchrow(
            "SELECT * FROM report_words WHERE word_id = $1",
            word_id
        )

    if not word_data:
        await quiz_manager.send_message_wth_save(
            chat_id=chat_id,
            text="–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        )
        return

    question_text = (
        f"‚ùì –í–æ–ø—Ä–æ—Å {idx + 1}/{len(word_ids)}\n\n"
        f"{word_data['sentence']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    row = []
    for opt_idx, option in enumerate(word_data["options"]):
        cb = f"quiz:{word_id}:{opt_idx}"
        row.append(InlineKeyboardButton(text=option, callback_data=cb))
        if len(row) >= 2:
            keyboard.inline_keyboard.append(row)
            row = []
    if row:
        keyboard.inline_keyboard.append(row)

    await quiz_manager.send_message_with_save(
        chat_id=chat_id,
        text=question_text,
        reply_markup=keyboard
    )


@router.callback_query(lambda callback: callback.data.startswith("quiz:"))
async def handle_word_quiz(
        callback: CallbackQuery,
        state: FSMContext,
):
    try:
        data = await state.get_data()
        db_pool = data.get("db_pool")
        chat_id = callback.message.chat.id
        quiz_manager = data.get("quiz_manager")  # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        if not quiz_manager:
            logger.error("QuizManager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            await callback.answer("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
            return

        parts = callback.data.split(":")
        if len(parts) != 3:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞.", show_alert=True)
            return

        word_id = int(parts[1])
        selected_idx = int(parts[2])

        async with db_pool.acquire_connection() as conn:
            record = await conn.fetchrow(
                "SELECT word, options, correct_index FROM report_words WHERE word_id = $1",
                word_id
            )

        if not record:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        is_correct = selected_idx == record["correct_index"]
        correct_word = record["options"][record["correct_index"]]
        selected_word = record["options"][selected_idx]

        if is_correct:
            msg = Text(
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n",
                Bold("–°–ª–æ–≤–æ: "), hd.quote(record['word'])
            ).as_markdown()
        else:
            msg = Text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ.\n\n",
                Bold("–í–∞—à –æ—Ç–≤–µ—Ç: "), hd.quote(selected_word), "\n",
                Bold("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "), hd.quote(correct_word), "\n",
                Bold("–°–ª–æ–≤–æ: "), hd.quote(record['word'])
            ).as_markdown()

        await callback.answer()

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id)
        await quiz_manager.send_message_wth_save(
            chat_id=chat_id,
            text=msg,
            parse_mode=ParseMode.HTML
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_idx = data.get("current_index", 0) + 1
        await state.update_data(current_index=next_idx)

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ quiz_manager
        await send_question(state, quiz_manager)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_word_quiz: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)


@router.callback_query()  # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
async def handle_unhandled_callback_query(callback: types.CallbackQuery):
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞: {callback.data}")
    await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", show_alert=True)