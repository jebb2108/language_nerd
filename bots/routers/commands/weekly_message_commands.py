import asyncio
from aiogram import Router, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import Text, Bold
from aiogram.utils.markdown import html_decoration as hd

from config import logger # noqa

router = Router(name=__name__)


async def send_user_report(resources, bot: Bot, user_id: int, report_id: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –æ—Ç—á–µ—Ç"""
    try:
        async with resources.db_pool.acquire() as conn:
            report = await conn.fetchrow(
                "SELECT * FROM weekly_reports WHERE report_id = $1",
                report_id
            )
            words = await conn.fetch(
                "SELECT * FROM report_words WHERE report_id = $1",
                report_id
            )

        if not report or not words:
            logger.warning(f"No report data found for report_id: {report_id}")
            return False

        message_text = (
            f"üìä –í–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º:\n\n"
            f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π",
                callback_data=f"start_report:{report_id}"
            )]
        ])

        await bot.send_message(
            chat_id=user_id,
            text=message_text,
            reply_markup=keyboard
        )

        return True

    except Exception as e:
        logger.error(f"Error sending interactive report to {user_id}: {e}")
        return False


@router.callback_query(lambda c: c.data.startswith("start_report:"))
async def start_report_handler(
        callback: types.CallbackQuery,
        state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º resources –∏–∑ data (–¥–æ–±–∞–≤–ª–µ–Ω–æ middleware)
        resources = callback.conf["resources"]
        report_id = int(callback.data.split(":")[1])

        async with resources.db_pool.acquire() as conn:
            words = await conn.fetch(
                "SELECT word_id FROM report_words WHERE report_id = $1",
                report_id
            )

        if not words:
            await callback.answer("–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", show_alert=True)
            return

        await state.clear()
        await state.update_data({
            "report_id": report_id,
            "word_ids": [word["word_id"] for word in words],
            "current_index": 0,
            "chat_id": callback.message.chat.id,
            "resources": resources  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        })

        await send_question(state, callback.bot, resources)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error starting report: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç—á–µ—Ç–∞.", show_alert=True)


async def send_question(state: FSMContext, bot: Bot, resources):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        data = await state.get_data()
        current_index = data["current_index"]
        word_ids = data["word_ids"]
        chat_id = data["chat_id"]

        if current_index >= len(word_ids):
            await bot.send_message(
                chat_id=chat_id,
                text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º."
            )
            await state.clear()
            return

        word_id = word_ids[current_index]

        async with resources.db_pool.acquire() as conn:
            word_data = await conn.fetchrow(
                "SELECT * FROM report_words WHERE word_id = $1",
                word_id
            )

        if not word_data:
            await bot.send_message(
                chat_id=chat_id,
                text="–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            return

        question_text = (
            f"‚ùì –í–æ–ø—Ä–æ—Å {current_index + 1}/{len(word_ids)}\n\n"
            f"{word_data['sentence']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        row = []
        for idx, option in enumerate(word_data["options"]):
            callback_data = f"quiz:{word_id}:{idx}"
            row.append(InlineKeyboardButton(
                text=option,
                callback_data=callback_data
            ))
            if len(row) >= 2:
                keyboard.inline_keyboard.append(row)
                row = []

        if row:
            keyboard.inline_keyboard.append(row)

        await bot.send_message(
            chat_id=chat_id,
            text=question_text,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error sending question: {e}", exc_info=True)
        data = await state.get_data()
        if "chat_id" in data:
            await bot.send_message(
                chat_id=data["chat_id"],
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞."
            )


def quiz_callback_filter(callback: types.CallbackQuery):
    return callback.data.startswith("quiz:")


@router.callback_query(quiz_callback_filter)
async def handle_word_quiz(
        callback: types.CallbackQuery,
        state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–æ —Å–ª–æ–≤–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º resources –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        resources = data.get("resources")

        if not resources:
            logger.error("Resources not found in state!")
            await callback.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        parts = callback.data.split(":")
        if len(parts) != 3:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞.", show_alert=True)
            return

        word_id = int(parts[1])
        selected_idx = int(parts[2])

        async with resources.db_pool.acquire() as conn:
            record = await conn.fetchrow(
                "SELECT word, options, correct_index FROM report_words WHERE word_id = $1",
                word_id
            )

        if not record:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        is_correct = selected_idx == record["correct_index"]
        correct_word = record["options"][record["correct_index"]]
        selected_word = record["options"][selected_idx]

        if is_correct:
            message = Text(
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n",
                Bold("–°–ª–æ–≤–æ: "), hd.quote(record['word'])
            ).as_markdown()
        else:
            message = Text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ.\n\n",
                Bold("–í–∞—à –æ—Ç–≤–µ—Ç: "), hd.quote(selected_word), "\n",
                Bold("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "), hd.quote(correct_word), "\n",
                Bold("–°–ª–æ–≤–æ: "), hd.quote(record['word'])
            ).as_markdown()

        await callback.answer()
        await callback.message.reply(
            text=message,
            parse_mode="MarkdownV2"
        )

        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass

        data = await state.get_data()
        current_index = data.get("current_index", 0) + 1

        if current_index >= len(data.get("word_ids", [])):
            await callback.bot.send_message(
                chat_id=data["chat_id"],
                text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º."
            )
            await state.clear()
        else:
            await state.update_data(current_index=current_index)
            # –ü–æ–ª—É—á–∞–µ–º resources –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await send_question(state, callback.bot, data["resources"])

    except Exception as e:
        logger.error(f"Error handling quiz callback: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)