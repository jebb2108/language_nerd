from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from typing import Union
from translations import QUESTIONARY # noqa
from utils.filters import IsBotFilter # noqa
from config import BOT_TOKEN_MAIN, logger # noqa
from routers.commands.menu_commands import show_main_menu  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–µ—Ç–æ–¥ # noqa

from middlewares.resources_middleware import ResourcesMiddleware # noqa

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router(name=__name__)

class PollingStates(StatesGroup):
    camefrom_state = State()
    language_state = State()
    introduction_state = State()

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É
router.message.filter(IsBotFilter(BOT_TOKEN_MAIN))
router.callback_query.filter(IsBotFilter(BOT_TOKEN_MAIN))

@router.message(Command("start"), IsBotFilter(BOT_TOKEN_MAIN))
async def start_with_polling(
        message: Message,
        state: FSMContext,
        resources: ResourcesMiddleware,
):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ state –∏ –ª–∏–±–æ –∏–¥—ë–º –≤ show_main_menu, –ª–∏–±–æ —Å—Ç–∞—Ä—Ç—É–µ–º –æ–ø—Ä–æ—Å.
    """
    db_pool = resources.db_pool
    user_id = message.from_user.id
    lang_code = message.from_user.language_code or "en"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ users
    try:
        async with db_pool.acquire() as conn:
            user_exists = await conn.fetchval(
                "SELECT 1 FROM users WHERE user_id = $1", user_id
            )
    except Exception as e:
        logger.error(f"Error checking user existence: {e}")
        user_exists = False

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(
        user_id=user_id,
        username=message.from_user.username or "",
        first_name=message.from_user.first_name or "",
        lang_code=lang_code,
        chosen_language="",
        camefrom="",
        about="",
        messages_to_delete=[],
        db_pool=db_pool,
    )

    if user_exists:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –º–µ–Ω—é
        await show_main_menu(message, state)
        return

    # –∏–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å ¬´–æ—Ç–∫—É–¥–∞ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏¬ª
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=QUESTIONARY["where_youcamefrom"][f"{lang_code}0"],
                callback_data="camefrom_friends"
            )
        ],
        [
            InlineKeyboardButton(
                text=QUESTIONARY["where_youcamefrom"][f"{lang_code}1"],
                callback_data="camefrom_search"
            )
        ],
        [
            InlineKeyboardButton(
                text=QUESTIONARY["where_youcamefrom"][f"{lang_code}2"],
                callback_data="camefrom_other"
            )
        ],
    ])

    await send_message_with_save(
        message=message,
        text=QUESTIONARY["intro"][lang_code],
        state=state,
        markup=True,
        keyboard=keyboard
    )
    await state.set_state(PollingStates.camefrom_state)


@router.callback_query(F.data.startswith("camefrom_"), PollingStates.camefrom_state)
async def handle_camefrom(
        callback: CallbackQuery,
        state: FSMContext,
):
    """
    –ü–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ ¬´–æ—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏¬ª –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞.
    """
    try:
        camefrom = callback.data.split("_", 1)[1]
        await state.update_data(camefrom=camefrom)

        data = await state.get_data()
        lang_code = data.get("lang_code", "en")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_russian")],
            [InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_english")],
            [InlineKeyboardButton(text="üá©üá™ Deutsch", callback_data="lang_german")],
            [InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data="lang_spanish")],
            [InlineKeyboardButton(text="üá®üá≥ ‰∏≠Êñá", callback_data="lang_chinese")],
        ])

        await send_message_with_save(
            message=callback,
            text=QUESTIONARY["lang_pick"][lang_code],
            state=state,
            markup=True,
            keyboard=keyboard
        )
        await state.set_state(PollingStates.language_state)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in handle_camefrom: {e}")


@router.callback_query(F.data.startswith("lang_"), PollingStates.language_state)
async def handle_language_choice(
        callback: CallbackQuery,
        state: FSMContext,
):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ –∏–¥—ë–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    try:
        data = await state.get_data()
        lang_code = data.get("lang_code", "en")
        user_id = data["user_id"]
        username = data.get("username", "")
        first_name = data.get("first_name", "")
        camefrom = data.get("camefrom", "")
        db_pool = data.get("db_pool")

        users_choice = callback.data.split("_", 1)[1]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=QUESTIONARY["confirm"][lang_code],
                callback_data="action_confirm"
            )]
        ])

        await callback.message.edit_text(
            f"‚û™ –í—ã –≤—ã–±—Ä–∞–ª–∏: {users_choice}\n\n{QUESTIONARY['gratitude'][lang_code]}",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
        )
        await state.set_state(PollingStates.introduction_state)
        await callback.answer()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        async with db_pool.acquire() as conn:
            await conn.execute(
                """
                INSERT INTO users (user_id, username, first_name, camefrom, chosen_language, lang_code)
                VALUES ($1,$2,$3,$4,$5,$6)
                """,
                user_id, username, first_name, camefrom, users_choice, lang_code
            )

        # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(callback.message, state)

    except Exception as e:
        logger.error(f"Error in handle_language_choice: {e}")


async def send_message_with_save(
        message: Union[Message, CallbackQuery],
        text: str,
        state: FSMContext,
        markup: bool = False,
        keyboard: InlineKeyboardMarkup = None,
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç) —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    if isinstance(message, CallbackQuery):
        chat_msg = message.message
    else:
        chat_msg = message

    if markup and keyboard:
        sent = await chat_msg.answer(
            text=text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        sent = await chat_msg.answer(text=text)

    data = await state.get_data()
    msgs = data.get("messages_to_delete", [])
    msgs.append(sent.message_id)
    await state.update_data(messages_to_delete=msgs)
    return sent


async def delete_previous_messages(
        bot: Bot,
        chat_id: int,
        state: FSMContext
):
    data = await state.get_data()
    for msg_id in data.get("messages_to_delete", []):
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
    await state.update_data(messages_to_delete=[])
