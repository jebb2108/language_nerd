import asyncio
from collections import defaultdict
from typing import Callable, Any, Dict, TYPE_CHECKING
from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery, Message

from app.dependencies import get_redis
from app.models import SentMessage
from config import config
from logging_config import setup_logger

if TYPE_CHECKING:
    from aiogram import Bot

logger = setup_logger('message_tracker', config.LOG_LEVEL)

class MessageTrackerMiddleware(BaseMiddleware):
    def __init__(self, bot: "Bot"):
        self.bot = bot
        self.edited_messages = defaultdict(list)
        self.search_messages = defaultdict(list)
        self.active_searches = defaultdict(bool)

    async def __call__(
        self, handler: Callable, event: Any, data: Dict[str, Any]
    ) -> Any:

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–•–û–î–Ø–©–ò–ï —Å–æ–±—ã—Ç–∏—è –î–û handler
        if isinstance(event, CallbackQuery):
            # await self.track_callback(event)
            pass

        # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        result = await handler(event, data)

        if isinstance(result, Message):
            await self.track_message(result)

        # –î–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ò–°–•–û–î–Ø–©–ò–• —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # asyncio.create_task(self._post_process(event, data))

        return result


    async def track_message(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            chat_id = message.chat.id
            message_id = message.message_id
            message_info = SentMessage(
                chat_id=chat_id,
                message_id=message_id,
                text=message.text or message.caption,
            )
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
            if message_info.text.startswith("üîç"):
                await self.start_search(message_info)

        except Exception as e:
            logger.error(f"Error in track_message: {e}")


    async def start_search(self, message_info: "SentMessage") -> None:
        """–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
        chat_id = message_info.chat_id
        message_id =  message_info.message_id

        try:
            redis = await get_redis()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å TTL
            await redis.save_sent_message(
                chat_id,
                message_info,
                config.WAIT_TIMER
            )
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            await self.cleanup_previous_searches(chat_id, message_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.search_messages[chat_id].append(message_id)
            self.active_searches[chat_id] = True
            logger.info(f"Started tracking search: chat={chat_id}, message={message_id}")

        except Exception as e:
            logger.error(f"Error in start_search_handler: {e}")


    async def cleanup_previous_searches(self, chat_id: int, curr_mid):
        """–û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        try:
            if chat_id in self.search_messages and self.search_messages[chat_id]:
                for message_id in self.search_messages[chat_id]:
                    # –†—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è,
                    # —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
                    if message_id != curr_mid:
                        await asyncio.sleep(0.5)
                        await self.bot.delete_message(chat_id, message_id)
                        self.search_messages[chat_id].remove(message_id)
                self.active_searches[chat_id] = False

        except Exception as e:
            logger.error(f"Error in cleanup_previous_searches: {e}")
