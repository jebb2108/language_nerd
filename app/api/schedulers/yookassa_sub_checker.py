# import asyncio
# from datetime import datetime, timedelta
# from typing import TYPE_CHECKING
#
# import aiohttp
# from tenacity import retry, stop_after_attempt, wait_exponential
#
# from app.dependencies import get_db, get_main_bot
# from config import config
# from logging_config import opt_logger as log
#
# if TYPE_CHECKING:
#     from aiogram import Bot
#
# logger = log.setup_logger('sub_checker')
#
#
# @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
# async def create_autopayment(user_id: int, amount: float) -> bool:
#     """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"""
#     try:
#         database = await get_db()
#         payment_method_id = await database.get_user_payment_method(user_id)
#
#         if not payment_method_id:
#             raise Exception(f"No saved payment method for user {user_id}")
#
#         headers = {
#             'Authorization': f'Bearer {config.YOOKASSA_SECRET_KEY}',
#             'Content-Type': 'application/json',
#             'Idempotence-Key': f"auto_{user_id}_{int(datetime.now(tz=config.TZINFO).timestamp())}"
#         }
#
#         data = {
#             "amount": {
#                 "value": str(amount),
#                 "currency": "RUB"
#             },
#             "capture": True,
#             "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É",
#             "metadata": {
#                 "user_id": user_id,
#                 "subscription_type": "monthly_auto",
#                 "auto_payment": True
#             },
#             "payment_method_id": payment_method_id,
#         }
#
#         async with aiohttp.ClientSession() as session:
#             async with session.post('https://api.yookassa.ru/v3/payments',
#                                     headers=headers,
#                                     json=data) as response:
#                 if response.status == 200:
#                     payment_data = await response.json()
#                     logger.info(f"Auto-payment created for user {user_id}: {payment_data['id']}")
#                 else:
#                     error_text = await response.text()
#                     raise Exception(f"Auto-payment creation failed: {error_text}")
#
#     except Exception as e:
#         logger.error(f"Failed to create auto-payment for user {user_id}: {e}")
#         return False
#
#
# async def handle_payment_creation_failure(user_id: int, bot: "Bot"):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–Ω–µ –ø—É—Ç–∞—Ç—å —Å –Ω–µ—É–¥–∞—á–Ω—ã–º –≤–µ–±—Ö—É–∫–æ–º)"""
#     try:
#         await bot.send_message(
#             chat_id=user_id,
#             text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
#         )
#
#         database = await get_db()
#         await database.deactivate_subscription(user_id)
#
#         logger.info(f"Payment creation failed for user {user_id}")
#
#     except Exception as e:
#         logger.error(f"Error processing failed payment creation for user {user_id}: {e}")
#
#
# async def main():
#     database = await get_db()
#     bot: "Bot" = await get_main_bot()
#     current_time = datetime.now(tz=config.TZINFO)
#
#     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑
#     batch_size = 100
#     offset = 0
#
#     while True:
#         payments_due_to = await database.get_sub_due_to_info(limit=batch_size, offset=offset)
#         if not payments_due_to:
#             break
#
#         for due_to_dict in payments_due_to:
#             user_id = due_to_dict["user_id"]
#             amount = due_to_dict["amount"]
#             untill = due_to_dict["untill"]
#
#             # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞
#             if current_time > untill:
#                 success = await create_autopayment(user_id, amount)
#                 if not success:
#                     await handle_payment_creation_failure(user_id, bot)
#
#             # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
#             elif untill - current_time <= timedelta(days=1):
#                 try:
#                     await bot.send_message(
#                         chat_id=user_id,
#                         text=f"üí≥ –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ {amount} —Ä—É–±–ª–µ–π –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"
#                     )
#                 except Exception as e:
#                     logger.error(f"Failed to send notification to user {user_id}: {e}")
#
#         offset += batch_size
#         await asyncio.sleep(1)
#
# if __name__ == '__main__':
#     asyncio.run(main())