"""
–¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–´: –ì–õ–ê–í–ù–´–ô –ë–û–¢ –ò –ë–û–¢-–°–õ–û–í–ê–†–¨

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤—É—Ö Telegram-–±–æ—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:
1. –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (Main Bot) - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. –ë–æ—Ç-—Å–ª–æ–≤–∞—Ä—å (Dictionary Bot) - –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º

–û–±–∞ –±–æ—Ç–∞ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
"""

import asyncio  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
import logging  # –î–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
import sys  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
import asyncpg
from aiohttp import web
from asyncpg.pool import Pool
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
from typing import List, Tuple, Optional  # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, Dispatcher, Router, F  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from aiogram.client.default import DefaultBotProperties  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
from aiogram.enums import ParseMode  # –†–µ–∂–∏–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (HTML, Markdown)
from aiogram.filters import Command, CommandStart, StateFilter  # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.state import State, StatesGroup  # –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.storage.memory import MemoryStorage  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
from aiogram.types import (  # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö Telegram
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton, ReplyKeyboardRemove, WebAppInfo
)

# –ò–º–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (config.py)
from config import *

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –í–´–ó–í–ê–ù–ê
load_dotenv(""".env""")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
db_pool: Optional[Pool] = None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (—Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
POSTGRES_HOST = os.getenv("POSTGRES_HOST", "localhost")
POSTGRES_USER = os.getenv("POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "password")
POSTGRES_DB = os.getenv("POSTGRES_DB", "telegram_bot")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
POSTGRES_PORT = int(os.getenv("POSTGRES_PORT", "5432"))


""" 
=============== –ë–û–¢ 1: –û–°–ù–û–í–ù–û–ô –ë–û–¢ (–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ) =============== 
–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ
"""

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN_MAIN = os.getenv("BOT_TOKEN_MAIN")

# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
storage = MemoryStorage()

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞
router_main = Router()

class PollingStates(StatesGroup):
    camefrom_state = State()
    language_state = State()
    introduction_state = State()



@router_main.message(Command("start"))
async def start_with_polling(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang_code = message.from_user.language_code
    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    question1, question2, question3 = QUESTIONARY[lang_code + '0'], QUESTIONARY[lang_code + '1'], QUESTIONARY[lang_code + '2']
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=question1, callback_data=f"reply_{question1}"),
            ],
            [
                InlineKeyboardButton(text=question2, callback_data=f"reply_{question2}"),
            ],
            [
                InlineKeyboardButton(text=question3, callback_data=f"reply_{question3}"),
            ],
        ])

    await state.update_data(
            user_id = message.from_user.id,
            username = message.from_user.username,
            language = message.from_user.language_code,
            camefrom = '',
            about = '',
        )

    await message.bot.send_message(
            chat_id=message.from_user.id,
            text=START_MESSAGE[lang_code],
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

    return state.set_state(PollingStates.camefrom_state)

@router_main.callback_query(F.data.startswith("reply_"), PollingStates.camefrom_state)
async def next_question(callback: CallbackQuery, state: FSMContext):
    reply = str(callback.data.split("_")[1])
    await state.update_data(
            camefrom = reply,
    )

    await callback.message.bot.send_message(
        chat_id=callback.from_user.id,
        text='‚û™ ' + reply,
        parse_mode=ParseMode.HTML
    )

    data = await state.get_data()
    lang_code = data['language']

    await callback.message.bot.send_message(
        chat_id=callback.from_user.id,
        text=GRATITUDE[lang_code],
        parse_mode=ParseMode.HTML
    )
    return state.set_state(PollingStates.introduction)


@router_main.callback_query(F.data.startswith("repply_", PollingStates.introduction))
async def start(message: Message):
    # URL –≤–∞—à–µ–≥–æ Web App
    web_app_url = "https://jebb2108.github.io/index.html"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Web App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìö –°–ª–æ–≤–∞—Ä—å", web_app=WebAppInfo(url=web_app_url)),
        ],
        [
            InlineKeyboardButton(text="üåê –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", url="https://t.me/lllang_dictbot"),
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
            InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/@NonGrata4Life"),
        ],
    ])

    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n{WELCOME}", reply_markup=keyboard)

@router_main.callback_query(F.data == "about")
async def about(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û –±–æ—Ç–µ"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    """
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô Go Back", callback_data="go_back")]
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ —Ç–µ–∫—Å—Ç "–û –±–æ—Ç–µ"
    await callback.message.edit_text(ABOUT, reply_markup=keyboard)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ)
    await callback.answer()

@router_main.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery):
    # URL –≤–∞—à–µ–≥–æ Web App
    web_app_url = "https://jebb2108.github.io/index.html"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Web App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìö –°–ª–æ–≤–∞—Ä—å", web_app=WebAppInfo(url=web_app_url)),
        ],
        [
            InlineKeyboardButton(text="üåê –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", url="https://t.me/lllang_dictbot"),
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
            InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/@NonGrata4Life"),
        ],
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{callback.from_user.first_name}</b>!\n\n{WELCOME}", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()



@router_main.message()
async def handle_other_messages(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
    –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start
    """
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é")


""" 
=============== –ë–û–¢ 2: –°–õ–û–í–ê–†–¨ (–£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ï–ö–°–ò–ö–û–ù–û–ú) =============== 
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º
–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
"""

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞-—Å–ª–æ–≤–∞—Ä—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN_DICT = os.getenv("BOT_TOKEN_DICT")

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞
router_dict = Router()


# = –°–ò–°–¢–ï–ú–ê –°–û–°–¢–û–Ø–ù–ò–ô (Finite State Machine) =
# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã

class WordStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞:
    - waiting_for_pos: –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
    - waiting_for_custom_pos: –æ–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
    """
    waiting_for_pos = State()
    waiting_for_custom_pos = State()


class WordsViewState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤–∞—Ä—è"""
    viewing_words = State()


class EditState(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞:
    - waiting_edit_word: –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ–≤–∞
    - waiting_edit_pos: –æ–∂–∏–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
    - waiting_edit_value: –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    waiting_edit_word = State()
    waiting_edit_pos = State()
    waiting_edit_value = State()


# = –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• =
# –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite –≤ –ø–∞–ø–∫–µ dbs

async def init_db():
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(
            host=POSTGRES_HOST,
            port=POSTGRES_PORT,
            user=POSTGRES_USER,
            password=POSTGRES_PASSWORD,
            database=POSTGRES_DB,
            min_size=5,
            max_size=20
        )
        async with db_pool.acquire() as conn:
            await conn.execute("""
            CREATE TABLE IF NOT EXISTS words (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            word TEXT NOT NULL,
            part_of_speech TEXT NOT NULL,
            translation TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT NOW(),
            UNIQUE (user_id, word)
        );
    """)
        logging.info("Database initialized successfully")
    except Exception as e:
        logging.critical(f"Database initialization failed: {e}")
        raise


async def close_db():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global db_pool
    if db_pool:
        await db_pool.close()

async def create_users_table(state: FSMContext):

    data = await state.get_data()
    user_id = data.get("user_id")
    username = data.get("username")
    language = data.get("language")
    camefrom = data.get("camefrom")
    about = data.get("about")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
        async with db_pool.acquire() as conn:
            await conn.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT NOT NULL,
            language TEXT NOT NULL,
            camefrom TEXT NOT NULL,
            about TEXT NULL,
            created_at TIMESTAMP DEFAULT NOW()
            UNIQUE (user_id)
            );
        """)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
            conn.execute("""INSERT INTO users (user_id, username, language, camefrom) VALUES ($1, $2, $3, $4, $5);""",
                         user_id,
                         username,
                         language,
                         camefrom,
                         about,
                    )

            logging.info("Users table created successfully")
    except Exception as e:
        logging.critical(f"Users table creation failed: {e}")
        raise

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def get_words_from_db(user_id: int) -> List[Tuple[str, str, str]]:
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT word, part_of_speech, translation FROM words WHERE user_id = $1 ORDER BY word",
            user_id
        )
        return [(row['word'], row['part_of_speech'], row['translation']) for row in rows]

async def delete_word_from_db(user_id: int, word: str) -> bool:
    async with db_pool.acquire() as conn:
        result = await conn.execute(
            "DELETE FROM words WHERE user_id = $1 AND word = $2",
            user_id, word
        )
        return "DELETE" in result

async def update_word_in_db(user_id: int, old_word: str, new_word: str, pos: str, value: str) -> bool:
    async with db_pool.acquire() as conn:
        # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if old_word != new_word:
            await conn.execute(
                "DELETE FROM words WHERE user_id = $1 AND word = $2",
                user_id, old_word
            )
            await conn.execute(
                "INSERT INTO words (user_id, word, part_of_speech, translation) VALUES ($1, $2, $3, $4)",
                user_id, new_word, pos, value
            )
            return True
        else:
            result = await conn.execute(
                """UPDATE words 
                SET part_of_speech = $1, translation = $2 
                WHERE user_id = $3 AND word = $4""",
                pos, value, user_id, new_word
            )
            return "UPDATE" in result

async def add_word_to_db(user_id: int, word: str, pos: str, value: str) -> bool:
    if value is None:
        value = ""
    async with db_pool.acquire() as conn:
        try:
            await conn.execute(
                "INSERT INTO words (user_id, word, part_of_speech, translation) VALUES ($1, $2, $3, $4)",
                user_id, word, pos, value
            )
            return True
        except Exception as e:
            logging.error(f"Database error: {e}")
            return False

async def check_word_exists(user_id: int, word: str) -> bool:
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT 1 FROM words WHERE user_id = $1 AND word = $2 LIMIT 1",
            user_id, word
        )
        return row is not None


# = –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê-–°–õ–û–í–ê–†–Ø =

@router_dict.message(Command("list"))
async def show_dictionary(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã
    words = await get_words_from_db(user_id)

    # –ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç - —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if not words:
        await message.answer("üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        words=words,  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤
        current_index=0,  # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (–Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞)
        # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±—É–∫–≤–∞–º)
        current_letter=words[0][0][0].upper() if words[0][0] else 'A'
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    await show_current_word(message, state)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤
    await state.set_state(WordsViewState.viewing_words)


async def show_current_word(message: Message, state: FSMContext, edit: bool = False, full_info: bool = False):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - edit: True - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, False - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ
    - full_info: True - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤
    words = data.get("words", [])
    # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (–∫–∞–∫–æ–µ —Å–ª–æ–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
    current_index = data.get("current_index", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ª–æ–≤–∞ –∏ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if not words or current_index >= len(words):
        await message.answer("‚ùå –°–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    word, pos, value = words[current_index]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    if full_info:
        # = –†–ï–ñ–ò–ú –ü–û–õ–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò =
        text = (
            f"üìñ <b>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {word}\n"
            f"üî¢ <b>–ù–æ–º–µ—Ä —Å–ª–æ–≤–∞:</b> {current_index + 1} out of {len(words)}\n"
            f"üî§ <b>–ß–∞—Å—Ç—å —Ä–µ—á–∏:</b> {pos}\n"
        )
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if value:
            text += f"üí° <b>–î–µ—Ç–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n{value}\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back")]
        ])
    else:
        # === –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –†–ï–ñ–ò–ú (–°–û–ö–†–ê–©–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø) ===
        text = (
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
            f"üìñ <b>–°–ª–æ–≤–æ</b>: {word}\n"
            f"üî¢ <b>–ù–æ–º–µ—Ä —Å–ª–æ–≤–∞:</b> {current_index + 1} out of {len(words)}\n"
            f"üî§ <b>–ß–∞—Å—Ç—å —Ä–µ—á–∏ —Å–ª–æ–≤–∞:</b> {pos}\n"
        )
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (—Å–æ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
        if value:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –∫–æ—Ä–æ—á–µ
            shortened_value = value[:23] + '...' if len(value) > 23 else value
            text += f"üí° <b>–ö—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {shortened_value}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="show_info")],
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="prev_word"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data="next_word")
            ],
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±—É–∫–≤–∞–º
            [
                InlineKeyboardButton(text="‚¨ÜÔ∏è –ë—É–∫–≤–∞", callback_data="prev_letter"),
                InlineKeyboardButton(text="–ë—É–∫–≤–∞ ‚¨áÔ∏è", callback_data="next_letter")
            ],
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_word"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_word")
            ],
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã/–≤—ã—Ö–æ–¥–∞
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_words")]
        ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if edit:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


# = –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ù–ê–í–ò–ì–ê–¶–ò–ò =

@router_dict.callback_query(F.data == "prev_word", WordsViewState.viewing_words)
async def prev_word_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ'"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_index = data.get("current_index", 0)

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    if current_index > 0:
        # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ 1
        await state.update_data(current_index=current_index - 1)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        await show_current_word(callback.message, state, edit=True)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await callback.answer("You're at the first word")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await callback.answer()


@router_dict.callback_query(F.data == "next_word", WordsViewState.viewing_words)
async def next_word_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ'"""
    data = await state.get_data()
    words = data.get("words", [])
    current_index = data.get("current_index", 0)

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
    if current_index < len(words) - 1:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ 1
        await state.update_data(current_index=current_index + 1)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
        await show_current_word(callback.message, state, edit=True)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await callback.answer("You're at the last word")

    await callback.answer()


@router_dict.callback_query(F.data == "prev_letter", WordsViewState.viewing_words)
async def prev_letter_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—ã–¥—É—â–∞—è –±—É–∫–≤–∞'
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥—Ä—É–ø–ø–µ —Å–ª–æ–≤
    """
    data = await state.get_data()
    words = data.get("words", [])
    current_index = data.get("current_index", 0)
    current_letter = data.get("current_letter", 'A')

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –≤—Å–µ—Ö —Å–ª–æ–≤
    letters = sorted(set(
        word[0][0].upper()
        for word in words
        if word[0] and len(word[0]) > 0  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø—É—Å—Ç–æ–µ
    ))

    # –ï—Å–ª–∏ –Ω–µ—Ç –±—É–∫–≤ - —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if not letters:
        await callback.answer("No letters found")
        return

    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –±—É–∫–≤—ã –≤ —Å–ø–∏—Å–∫–µ
        current_pos = letters.index(current_letter)
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–Ω–µ –º–µ–Ω—å—à–µ 0)
        new_pos = max(0, current_pos - 1)
        # –ë–µ—Ä–µ–º –±—É–∫–≤—É –ø–æ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        new_letter = letters[new_pos]
    except ValueError:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–π –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
        new_letter = letters[0]

    # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å –Ω–æ–≤–æ–π –±—É–∫–≤–æ–π
    new_index = next((
        i for i, word in enumerate(words)
        if word[0] and word[0][0].upper() == new_letter
    ), 0)  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –Ω–∞—á–∏–Ω–∞–µ–º —Å 0

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        current_index=new_index,
        current_letter=new_letter
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    await show_current_word(callback.message, state, edit=True)
    await callback.answer()


@router_dict.callback_query(F.data == "next_letter", WordsViewState.viewing_words)
async def next_letter_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∞—è –±—É–∫–≤–∞'
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–µ —Å–ª–æ–≤
    """
    data = await state.get_data()
    words = data.get("words", [])
    current_index = data.get("current_index", 0)
    current_letter = data.get("current_letter", 'A')

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –≤—Å–µ—Ö —Å–ª–æ–≤
    letters = sorted(set(
        word[0][0].upper()
        for word in words
        if word[0] and len(word[0]) > 0
    ))

    if not letters:
        await callback.answer("No letters found")
        return

    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –±—É–∫–≤—ã
        current_pos = letters.index(current_letter)
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–Ω–µ –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞)
        new_pos = min(len(letters) - 1, current_pos + 1)
        new_letter = letters[new_pos]
    except ValueError:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–π –±—É–∫–≤—ã –Ω–µ—Ç - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
        new_letter = letters[-1]

    # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å –Ω–æ–≤–æ–π –±—É–∫–≤–æ–π
    new_index = next((
        i for i, word in enumerate(words)
        if word[0] and word[0][0].upper() == new_letter
    ), 0)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        current_index=new_index,
        current_letter=new_letter
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    await show_current_word(callback.message, state, edit=True)
    await callback.answer()


@router_dict.callback_query(F.data == "cancel_words", WordsViewState.viewing_words)
async def cancel_words_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'
    –í—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await callback.message.delete()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()


@router_dict.callback_query(F.data == "delete_word", WordsViewState.viewing_words)
async def delete_word_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'
    –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    data = await state.get_data()
    words = data.get("words", [])
    current_index = data.get("current_index", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –∏ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if not words or current_index >= len(words):
        await callback.answer("No word to delete")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    word, _, _ = words[current_index]

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã
    if await delete_word_from_db(user_id, word):
        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ - –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        words = await get_words_from_db(user_id)

        # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º
        if not words:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            return

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (—á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã)
        new_index = current_index if current_index < len(words) else len(words) - 1
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        new_letter = words[new_index][0][0].upper() if words[new_index][0] else 'A'

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            words=words,
            current_index=new_index,
            current_letter=new_letter
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await show_current_word(callback.message, state, edit=True)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    else:
        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        await callback.answer(f"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ {word}")


@router_dict.callback_query(F.data == "edit_word", WordsViewState.viewing_words)
async def start_edit_word(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
    """
    data = await state.get_data()
    words = data.get("words", [])
    current_index = data.get("current_index", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not words or current_index >= len(words):
        await callback.answer("No word to edit")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    word, pos, value = words[current_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    await state.update_data(
        editing_word=word,  # –°–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        editing_pos=pos,  # –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —Ä–µ—á–∏
        editing_value=value,  # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        editing_index=current_index,  # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
        original_word=word,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        original_pos=pos,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ä–µ—á–∏
        original_value=value  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            InlineKeyboardButton(text="‚úèÔ∏è –°–ª–æ–≤–æ", callback_data="edit_word_text"),
            InlineKeyboardButton(text="üí° –ó–Ω–∞—á–µ–Ω–∏–µ", callback_data="edit_word_value")
        ],
        [
            InlineKeyboardButton(text="üî§ –ß–∞—Å—Ç—å —Ä–µ—á–∏", callback_data="edit_word_pos")
        ],
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_edit")]
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> {word}\n"
        f"üî§ <b>–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —Ä–µ—á–∏:</b> {pos}\n"
        f"üí° <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {value or 'None'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(EditState.waiting_edit_word)


@router_dict.callback_query(F.data.startswith("edit_word_"), EditState.waiting_edit_word)
async def handle_edit_choice(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ callback_data
    edit_type = callback.data.replace("edit_word_", "")
    data = await state.get_data()
    word = data.get("editing_word", "")

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    if edit_type == "text":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–ª–æ–≤–∞
        await callback.message.edit_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è <b>{word}</b>:", parse_mode=ParseMode.HTML)
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (waiting_edit_word)
        await state.set_state(EditState.waiting_edit_word)
    elif edit_type == "value":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        await callback.message.edit_text(f"üí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>{word}</b>:", parse_mode=ParseMode.HTML)
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        await state.set_state(EditState.waiting_edit_value)
    elif edit_type == "pos":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="Noun", callback_data="newpos_noun"),
             InlineKeyboardButton(text="Verb", callback_data="newpos_verb")],
            [InlineKeyboardButton(text="Adjective", callback_data="newpos_adjective"),
             InlineKeyboardButton(text="Adverb", callback_data="newpos_adverb")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_edit")]
        ])
        await callback.message.edit_text(
            f"üî§ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç—å —Ä–µ—á–∏ –¥–ª—è <b>{word}</b>:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏ —Ä–µ—á–∏
        await state.set_state(EditState.waiting_edit_pos)

    await callback.answer()


@router_dict.callback_query(F.data == "cancel_edit", EditState.waiting_edit_word)
@router_dict.callback_query(F.data == "cancel_edit", EditState.waiting_edit_value)
@router_dict.callback_query(F.data == "cancel_edit", EditState.waiting_edit_pos)
async def cancel_edit_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ª–æ–≤–∞
    """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤
    await state.set_state(WordsViewState.viewing_words)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    await show_current_word(callback.message, state, edit=True)
    await callback.answer()


@router_dict.callback_query(F.data == "show_info", WordsViewState.viewing_words)
async def show_full_info_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    """
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await show_current_word(callback.message, state, edit=True, full_info=True)
    await callback.answer()


@router_dict.callback_query(F.data == "go_back", WordsViewState.viewing_words)
async def go_back_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
    await show_current_word(callback.message, state, edit=True)
    await callback.answer()


# = –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–ï–ô =

@router_dict.message(EditState.waiting_edit_word)
async def handle_edit_word_text(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ–≤–∞
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    """
    user_id = message.from_user.id
    # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

    data = await state.get_data()
    old_word = data.get("editing_word", "")
    original_word = data.get("original_word", "")

    # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ —á–∞—Å—Ç—å —Ä–µ—á–∏)
    if old_word != original_word:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
        words = await get_words_from_db(user_id)
        if any(w[0].lower() == old_word.lower() for w in words):
            await message.answer("‚ö†Ô∏è –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ")
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_word=old_word)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await save_edited_word(message, state, user_id)


@router_dict.message(EditState.waiting_edit_value)
async def handle_edit_word_value(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    new_value = message.text.strip()
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_value=new_value)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await save_edited_word(message, state, message.from_user.id)


@router_dict.callback_query(F.data.startswith("newpos_"), EditState.waiting_edit_pos)
async def handle_edit_word_pos(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —á–∞—Å—Ç–∏ —Ä–µ—á–∏
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —á–∞—Å—Ç—å —Ä–µ—á–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Ä–µ—á–∏ –∏–∑ callback_data
    new_pos = callback.data.replace("newpos_", "")
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_pos=new_pos)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await save_edited_word(callback.message, state, callback.from_user.id)
    await callback.answer()


async def save_edited_word(message: Message, state: FSMContext, user_id: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    data = await state.get_data()
    # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    new_word = data.get("editing_word", "")
    new_pos = data.get("editing_pos", "")
    new_value = data.get("editing_value", "")

    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    original_word = data.get("original_word", "")
    original_pos = data.get("original_pos", "")
    original_value = data.get("original_value", "")

    editing_index = data.get("editing_index", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –≤–æ–æ–±—â–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (new_word == original_word and
            new_pos == original_pos and
            new_value == original_value):
        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç - —Å–æ–æ–±—â–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        await message.answer("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        await state.set_state(WordsViewState.viewing_words)
        await show_current_word(message, state, edit=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = await update_word_in_db(
        user_id,
        original_word,
        new_word,
        new_pos,
        new_value
    )

    if success:
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ - –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        words = await get_words_from_db(user_id)

        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ
        # (—Å–ª–æ–≤–æ –º–æ–≥–ª–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –∏–∑-–∑–∞ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
        new_index = next((
            i for i, w in enumerate(words)
            if w[0] == new_word
        ), editing_index)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            words=words,
            current_index=new_index
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        await state.set_state(WordsViewState.viewing_words)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        await show_current_word(message, state, edit=True)
    else:
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.set_state(WordsViewState.viewing_words)
        await show_current_word(message, state, edit=True)


# = –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–´–• –°–õ–û–í =

@router_dict.message(CommandStart())
async def start_command_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –±–æ—Ç–∞-—Å–ª–æ–≤–∞—Ä—è
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(
        text=DICT_GREETING,
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Other (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∞—Å—Ç–∏ —Ä–µ—á–∏)
@router_dict.callback_query(F.data == "pos_other", WordStates.waiting_for_pos)
async def ask_custom_part_of_speech(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∞—Å—Ç–∏ —Ä–µ—á–∏"""
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —á–∞—Å—Ç—å —Ä–µ—á–∏:")
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    await state.set_state(WordStates.waiting_for_custom_pos)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
@router_dict.message(WordStates.waiting_for_custom_pos)
async def handle_custom_part_of_speech(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏"""
    # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    custom_pos = message.text.strip().lower()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not custom_pos:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_id = message.from_user.id
    data = await state.get_data()
    word = data["word"]
    value = data.get("value")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É
    if await add_word_to_db(user_id, word, custom_pos, value):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        response = f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {word} ({custom_pos})"
        if value:
            shortened_value = value[:23] + '...' if len(value) > 23 else value
            response += f"\n–ö—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {shortened_value}"
        await message.answer(response)
    else:
        await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


""" 
    –°–ª–æ–≤–∞, –Ω–µ –ø–æ–ø–∞–≤—à–∏–µ –≤ —Ä–µ–≥–∏—Å—Ç—Ä waiting_for_custom_pos, 
    –ø—Ä–æ—Ö–æ–¥—è—Ç –¥–∞–ª—å—à–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_part_of_speech_text
    
"""

@router_dict.message(WordStates.waiting_for_pos)
async def handle_part_of_speech_text(message: Message):
    """
    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
    """
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å —Ä–µ—á–∏")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Cancel (–æ—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞)
@router_dict.callback_query(F.data == "pos_cancel", WordStates.waiting_for_pos)
async def cancel_adding_word(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    await state.clear()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()



@router_dict.callback_query(F.data.startswith("pos_"), WordStates.waiting_for_pos)
async def save_new_word_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —á–∞—Å—Ç—å—é —Ä–µ—á–∏
    """
    user_id = callback.from_user.id
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Ä–µ—á–∏ –∏–∑ callback_data
    part_of_speech = callback.data.replace("pos_", "")
    data = await state.get_data()
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    word = data.get("word")
    value = data.get("value")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if await add_word_to_db(user_id, word, part_of_speech, value):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        response = f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {word} ({part_of_speech})"
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (—Å–æ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ)
        if value:
            shortened_value = value[:23] + '...' if len(value) > 23 else value
            response += f"\n–ö—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {shortened_value}"

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await callback.message.edit_text(response)
        await callback.answer()
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        await callback.message.edit_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await callback.answer()




# ==== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ====

@router_dict.message()
async def universal_message_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—Ç–æ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
    if message.text.startswith('/'):
        return

    logging.info(f"{message.from_user.id}: new message: {message.text}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —á–∞—Å—Ç—å —Ä–µ—á–∏
    if current_state == WordStates.waiting_for_pos.state:
        # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        await handle_part_of_speech_text(message)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
    if current_state in [
        EditState.waiting_edit_word.state,
        EditState.waiting_edit_pos.state,
        EditState.waiting_edit_value.state
    ]:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –µ–≥–æ)
        return

    # –ï—Å–ª–∏ –Ω–µ –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    await process_word_input(message, state)


async def process_word_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
    """
    user_id = message.from_user.id
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "—Å–ª–æ–≤–æ:–∑–Ω–∞—á–µ–Ω–∏–µ"
    if ':' in text:
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–ª–æ–≤–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        parts = text.split(':', 1)
        word = parts[0].strip()
        # –ó–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        value = parts[1].strip() if parts[1].strip() else ""
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è - —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ, –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è
        word, value = text, ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if await check_word_exists(user_id, word):
        await message.answer("‚ö†Ô∏è –°–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(word=word, value=value)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ", callback_data="pos_noun"),
        ],
        [
            InlineKeyboardButton(text="–ì–ª–∞–≥–æ–ª", callback_data="pos_verb"),
            InlineKeyboardButton(text="–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ", callback_data="pos_adjective"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞—Ä–µ—á–∏–µ", callback_data="pos_adverb"),
            InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="pos_other"),
        ],
        [
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="pos_cancel")
        ],

    ])

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —á–∞—Å—Ç—å —Ä–µ—á–∏
    await message.answer("‚ùì –ö–∞–∫–∞—è —ç—Ç–æ —á–∞—Å—Ç—å —Ä–µ—á–∏?", reply_markup=keyboard)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ä–µ—á–∏
    await state.set_state(WordStates.waiting_for_pos)

"""
=============== –ó–ê–ü–£–°–ö WEB API ===============
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WEB –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–µ–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
"""


# –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Web App
async def web_app_handler(request):
    return web.FileResponse("webapp/dist/index.html")


# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def api_words_handler(request):
    user_id = int(request.query.get('user_id'))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    words = await get_words_from_db(user_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    words_json = []
    for word_tuple in words:
        # word_tuple: (word, part_of_speech, translation)
        words_json.append({
            'word': word_tuple[0],
            'part_of_speech': word_tuple[1],
            'translation': word_tuple[2]
        })

    logging.info(f"Sent {len(words_json)} words for user {user_id}")
    return web.json_response(words_json)


""" 
=============== –ó–ê–ü–£–°–ö –í–°–ï–ô –°–ò–°–¢–ï–ú–´ =============== 
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
"""

async def run_bot(bot_token: str, router: Router, storage=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - bot_token: —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
    - router: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    - storage: —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(storage=storage) if storage else Dispatcher()
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    dp.include_router(router)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram
    await dp.start_polling(bot)


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        stream=sys.stdout,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    logging.info("Database connection established")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–æ–≤
    tasks = []
    if BOT_TOKEN_MAIN:
        logging.info("Starting Main Bot...")
        tasks.append(run_bot(BOT_TOKEN_MAIN, router_main, storage))

    if BOT_TOKEN_DICT:
        logging.info("Starting Dictionary Bot...")
        tasks.append(run_bot(BOT_TOKEN_DICT, router_dict, storage))

    if not tasks:
        logging.error("‚ùå Bot tokens not found.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(*tasks)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await close_db()
    logging.info("Database connection closed")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())